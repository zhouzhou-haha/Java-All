VSCode安装地址：https://code.visualstudio.com
Maven中央仓库地址：https：//repol.maven.org/maven2/
Mybatis官网：https://mybatis.org/mybatis-3/zh/index.html
SpringMVC官方文档：https://docs.spring.io/spring-framework/reference/

SSM：MyBatis + Spring + SpringMVC
	SpringMVC：
		接收请求
		响应数据
		拦截器
		全局处理异常

	Spring：
		IOC
		DI
		AOP
		事务管理
	
	Mybatis：
		Mybatis

常用注解：
	@RestController = @ReponseBody + @Controller	
	@RequestParam					将请求指定参数与方法形参进行绑定
		value		请求参数名
		required	是否必需，请求中必需包含该参数	
		defaultVlue	默认值
	@Param						在Mapper接口中传入多个参数
	@Pathvariable("id")				获取路径参数，将参数绑定为id
	@RequestBody					将Json格式的数据封装到实体类中，数据键名与形参对象属性名相同
	@RequestPart					将上传文件与其他非文件字段一起处理
	@Value + @RefreshScope				
		@Value("${配置文件中的key}")		读取外部配置，例：nacos中的配置
		@RefreshScope				属性自动刷新
	@ConfigurationProperties(prefix = "mail")	读取配置文件前缀属性与pojo属性绑定	
	@RefreshScope					属性刷新功能
	@ServletComponentScan				在@SpringBootApplication上添加
								可以将JavaWeb三大组件通过@WebServlet，@WebFilter，@WebListener自动注册到Spring容器中
	@RestControllerAdvice				定义全局异常处理器
	@ExceptionHandler(Exception.class)		在方法上添加注解，表示该方法专门处理该类异常
	@Transactional					开启事务管理
	@ComponentScan					开启组件扫描
	@Conditional					按照一定的条件进行判断，满足给定条件后才会注册对应的bean到IOC容器中
	@Valid/@Validated				开启参数校验
	@Payload					处理消息传递时，指示方法参数绑定到消息的有效负载部分
	@DateTimeFormat					定义日期时间字段的格式化和解析规则
	@JsonProperty					指定Java对象属性与JSON字段之间映射关系,处理JSON字段与Java字段名不一致情况
	@JSONField					指定Java对象属性与JSON字段之间映射关系,处理JSON字段与Java字段名不一致情况
	@JsonFormat <==> 配置消息转换器			JSON序列化反序列化控制日期和时间格式			
		补充：	JSON序列化	将对象转换为JSON格式的字符串	@ResponseBody		
			JSON反序列化	将JSON格式的字符串转换为对象	@RequestBody
			消息：前端发请求给后端，请求体中的内容/后端发消息给前端，响应体中的内容
			消息转换器：实现消息与Java对象的转换(请求体 -> Java对象/Java对象 -> 响应体)
				常见消息转换器：
					MappingJackson2HttpMessageConverter			负责读写JSON格式数据		@JsonFormat
					AllEncompassingFormHttpMessageConverter			负责读写Form表单数据
					Jaxb2RootElementHttpMessageConverter			负责读写XML格式数据
					ByteArrayHttpMessageConverter				负责读写二进制数据
					StringHttpMessageConverter				负责读写字符串格式数据
					ResourceHttpMessageConverter				负责读写资源文件数据
					SourceHttpMessageConverter				负责读写资源数据		
					

HTTP协议:	超文本传输协议，规定了浏览器和服务器之间数据传输的规则
	数据传输规则：浏览器和服务器之间的数据传输格式		
		浏览器	 请求	服务器
			 响应
	特点：
		基于TCP协议：面向连接，安全
		一次请求对应一次响应
		HTTP协议是无状态的：每次请求都是独立的，后一次请求不会记录前一次请求的数据
	
	请求响应协议：
		Servlet处理HTTP请求流程：
									(创建)			HTTPServletRequest封装请求信息
					HTTP请求				↗
				浏览器	   ⇄	Servlet容器(Web服务器)	→(调用service())	Servlet通过service()方法处理请求	
					HTTP响应		读取响应		↘
									(创建)			HTTPServletReponse封装响应信息

		HTTP请求数据格式(Request/HttpServletRequest)：	
			请求行：请求数据第一行(请求方式，资源路径，协议/版本)
				例：GET /hello HTTP/1.1		get请求数据放在请求行？跟数据

			请求头：第二行开始，格式：key：value
			例： 	Accept-Encoding: gzip, deflate, br
			    	Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6
			   	Cache-Control: max-age=0
			    	Connection: keep-alive
			    	Host: localhost:8080

			请求头属性：
				Host		请求主机名
				User-Agent	浏览器版本
				Accept		浏览器能接收的资源类型
				Accept-Language	浏览器偏好的语言
				Accept-Encoding	浏览器可以支持的压缩类型
				Content-Type	请求主体的数据类型
				Content-Length	请求主题的大小
			
			请求体：	Post请求独有，存放请求参数
				Json格式请求体

			HttpServletRequest：		代表客户端的请求，可以获取头参数/客户端请求的所有信息
				getRequestURI()				返回请求行中参数部分
				getRemoteHost()				返回发出请求客户机主机名
				getRemoteAddr()				返回发出请求客户机IP地址
				getHeaders(String name)			以String对象的枚举形式返回指定请求头所有值
				getHeader(String name)			以String形式返回指定请求头的值
				getHeaderNames()			返回包含所有请求头名称枚举
				getParameterValues(String name)		根据name获取请求参数列表
				getParameterMap()			返回请求参数与请求参数值的映射关系	

		HTTP响应数据格式(Reponse/HttpServletResponse)：
			响应行：响应数据第一行(协议，状态码，描述)
				例：HTTP/1.1 200	OK

				HTTP响应码格式：
					1xx：101，临时状态码，表示请求已被接收，客户端继续请求
					2xx：200，成功，表示请求已经被成功接收，处理已经完成
					3xx：重定向到其他定地方，客户端再次发起请求完成处理
					4xx：404，地址不存在，请求不存在的资源    客户端责任
						400	客户端请求有语法错误
						401	令牌缺失(原因：API考虑安全性，不能让未授权的请求调用收到保护的API)
						403	服务器收到请求，拒绝提供服务，没有权限访问资源
						404	请求资源不存在
						405	请求方式出错，Get/Post切换
						428	服务器要求客户端访问要携带特定的请求头
						429	用户在给定时间内发送了太多请求
						431	请求头太大
					5xx：500，程序报错，抛出异常	 服务端责任
						500	后端程序报错
						503	服务器尚未准备好处理请求
			
			响应头：第二行开始，格式key：value
				例： Content-Type: text/html;charset=UTF-8
				    Content-Length: 13
				    Date: Fri, 24 Nov 2023 06:31:45 GMT
				    Keep-Alive: timeout=60
				    Connection: keep-alive
			响应头属性：
				Server			响应服务类型和版本
				Content-Type		响应内容类型	application/json
				Content-Length		响应内容的长度
				Content-Encoding	响应压缩算法/页面传输过程中已采用的编码方式	
				Cache-Control		客户端应该如何缓存
				Date			发送HTTP消息的日期
				Set-Cookie		浏览器应该记下来的cookie		
				Refresh			页面过期时间，超过指定时间，浏览器刷新
				Location		浏览器应该重新连接到的URL
				Content-Disposition	将响应存储到磁盘给定名称文件中
				Last-Modified		服务器上文件最后修改时间
					
			响应体：存放响应数据	Json格式响应体
				
			HttpServletReponse：
				setContentType(String type)		设置Content-Type消息头
				setContentLength(int Length)		设置Content-Lenght消息头
				setCharacterEncoding(String charset)	设定返回客户端内容编码方式
				setHeader(Stirng name,String value)	设置HTTP响应头(服务器发送到客户端的附加信息)
					reponse.setHeader("Content-Type","application/json")					服务器返回JSON格式数据
					reponse.setHeader("Cache-Control","no-cache")						控制浏览器缓存行为，避免客户端缓存过期资源
					reponse.setHeader("Location","http://www.baidu.com")					让客户端重定向到另一个URL
					reponse.setHeader("Content-Disposition","attchment;filename = \"example.txt\"")		设置响应头提示浏览器以附件方式下载文件
				

Web服务器：
	Web服务器是一个软件程序，对HTTP协议解析数据的操作进行封装
	Tomcat：Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器
		Tomcat也被称为Web容器，Servelt容器，Servelt程序需要依赖Tomcat才能运行
			
		入门程序解析：
			spring-boot-starter-web		包含了web应用开发所需要的常见依赖
			spring-boot-starter-test	springboot单元测试依赖
			mybatis-spring-boot-starter	mybatis起步依赖
			mysql-connector-j/java		mysql驱动包
		
		Springboot内置服务器：
			当启动类运行时，自动启动内嵌的Tomcat服务器

			一套Controller接口放在tomcat服务器中，浏览器根据路径请求访问服务器，服务器响应
			请求和响应是基于HTTP协议的
		
		B/S架构：浏览器/服务器模式		只要能通过浏览器访问到的网站都是BS架构
				   	    前端控制器
			http请求         -> 	DispatcherServelt      
			请求头中的信息 -> 	解析到HttpServletRequest(请求数据处理)  -> 分发到各个Controller
			响应数据	    ->  HttpServeltResponse(设置响应数据)
			 浏览器				Web服务器/tomcat

		C/S架构：客户端/服务器模式			QQ/微信等一系列需要安装软件应用客户端都是CS架构
	
	环境准备：
	请求：
		Postman：接口测试工具		衍生工具：ApiPost	/Apifox	
			get请求都是随地址url发送，可以直接在请求地址后面写请求数据
			post请求不能随url发送请求数据，需要使用Postman	
			
			Get:Params中设置参数
			Post：JSON格式数据Body中x-www-form/raw表单中设置参数，后面格式改为JSON
			      form-data是表单格式发送数据
			
			1.简单参数：	需要通过HttpServletRequest对象手动获取
				get:?name = Tom&age = 10	
				传入参数：HttpRequest request
				String name = rquest.getParameter("name");
				
			2.实体参数：
				SpringBoot中接收简单参数
				public String simpleParam(String name,Integer age/User){			注意：方法参数名与请求参数名不匹配，使用@RequestParam完成映射
					//User对象完成映射封装							public String simpleParam(@RequestParam(name = "name")String username,Integer age){}			
				}										required = true	参数必须要传递

				public class User{
					private String name;
					priavte Integr age;
					private Address address;
				}
				
				复杂属性封装：
					get:?name = Tom&age = 10&address.province&address.city	

				文件参数用MultipartFile接收参数
					@RequestParam("file")MultipartFile file		将传递参数与形参进行绑定
				
			3.数组集合参数：
				请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参可以接收参数
				get:?hobby = java&hobby = C
				数组参数：
					请求参数名与形参中数组变量名相同
					public String arrayParam(String[] hobby){}	
				集合参数：
					请求参数名与形参中集合变量名相同，通过@RequestParam绑定参数关系
					public String listParam(@RequestParam List<String> hobby)
			
			4.日期参数：	@DateTimeFormat(patten = "")指定日期时间格式
				get:?updateTime = 2022-12-12 10:00:20
					public String dateParam(@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")LocalDateTime updateTime)
				
			5.Json参数：
				Post传递Json格式的请求参数：
					Postman中Body中选择raw之后在列表中选择JSON格式
					下面空白部分填写Json数据
					{
						"name":"Tom"
						"age":"18"
						"address":{
							"province":"beijing"
							"city":"beijing"
						}
					}

				服务端接收Json格式的数据：		@RequestBody将Json格式的数据封装到实体类中
					JSON数据键名与形参对象属性名相同，定义对象类型形参即可接收参数，使用@RequestBody标识
					public String jsonParam(@RequestBody User user){}
					public class User{
					private String name;
					priavte Integr age;
					private Address address;
				}

			6.路径参数：
				通过请求路径直接传递参数：
					Get：http://localhost:8080/path/1/周舟	1是请求路径参数，多个参数
						@RequestMapping("/path/{id}/{name}")	/{id}表示请求路径参数，不是固定值，参数名为id
						@Pathvariable获取路径参数，与入参进行绑定
						public String pathParam(@PathVariable Integer id){}

			7.参数：JSON格式数据 + MultipartFile文件传参：
				方法：使用@RequestPart将MultipartFile文件 + @RequestBody JSON数据

				public R<Boolean> uploadFile(@RequestPart("modelDataDTO") ModelDataDTO modelDataDTO,@RequestPart("files") MultipartFile[] files){}
				
				*****	注意：	@RequestPart可以处理JSON数据与MultipartFile文件一起传参，但是前端浏览器不能处理@RequestPart格式的JSON数据
				
				Postman测试请求：
					Headers请求头：
						Content-Type			multipart/form-data
						
					Body请求体 -> form-data：
						Key				Value						ContentType
						modelDataDTO			{						application/json(必须要有，否则报错)
											"workYear":"2025"，				
											"deviceType":"BOOSTER"，	
											"deviceFactory":"数据厂家1"，
											"collectTime":"2025-04-23"，
											"fileType":"2"，
											"deviceName":"周舟测试设备"
										}
						files				选择具体文件(提示：3 files selected)

			8.参数：JSON格式数据 + MultipartFile文件传参：
				方法：使用@RequestParam将MultipartFile文件 + JSON数据字符串

				public R<Boolean> uploadFile(@RequestParam String modelDataDTOStr,@RequestPart("files") MultipartFile[] files){
					ModelDataDTO modelDataDTO = JSON.parseObject(modelDataDTOStr,ModelDataDTO.class);		
					return R.data(threeDataService.uploadFile(modelDataDTO,files));
				}
				
				ModelDataDTO modelDataDTO = JSON.parseObject(modelDataDTOStr,ModelDataDTO.class)		解析JSON字符串为Java对象
				 String businessId = JSONUtil.parseObj(sourceRemark).getStr("businessId", "");				解析JSON字符串为JSON对象
											
	响应：
		@ResponseBody	
			作用范围：Controller方法，Controller类
			类：当前类下的所有方法返回值都会作为响应数据
			方法：将方法返回值直接作为响应数据返回给浏览器，返回为一个对象或集合，转为JSON格式响应
			@RestController = @Controller +@ResponseBody
			
		统一响应结果：
			public class Result{
				private Integer code；	响应码：1  成功/0  失败	
				private String msg;	提示信息	描述字符串
				private Object data;	返回的数据
				
				//增删改 成功响应
    				public static Result success(){
        				return new Result(1,"success",null);
    				}
    				//查询 成功响应
    				public static Result success(Object data){
        				return new Result(1,"success",data);
    				}
    				//失败响应
    				public static Result error(String msg){
        				return new Result(0,msg,null);

				}}

			例：
				@RestController
				@RequestMapping()		返回格式为JSON
				public Result hello(){
					return Result;
				}

--------------------------------------------------------------------------------------------------------------------------------------------------------------
		
Web前端开发：	
	Web：全球广域网，也称万维网，能够通过浏览器访问的网站
	web网站由前端程序，后端程序，数据库程序
	开发模式：前后端分离
	浏览器		前端程序		后端程序		数据库
	     ---请求--->
	     <---响应---
	     ---请求-------------------->后端程序--请求--->	
	     <--响应---------------------后端程序<--响应---
	
	不同的浏览器，内核不同，对于前端的解析效果会存在差异
	Web标准：	网页标准
		HTML		网页结构
		CSS		网页表现
		JavaScript(JS)	网页行为		交互
	
	HTML:超文本标记语言	
		超文本：除了文本还可以定义图片，视频，超链接等
		标记语言：由标签构成的语言
		form标签：	表单标签
			主要功能：将用户输入的信息提交到指定地址(服务器)上
			属性：
				method	表单提交的方式
					Post	将用户输入的数据打包，在请求体中发送，用户不能在前台看到发送数据	
					Get	随url进行发送	?username  = Tom & age = 12
				action	表达发送的目标地址，一般是接受数据服务的地址
				onsubmit	在提交表单时执行的回调函数，配合JS使用
				enctype		设置发送数据的类型
			例：
				<form action = "" method = "get">	
					用户名：<input type = "text" name = "username">
					年龄：<input type = "text" name = "age">
					<input type = "submit" value = "提交">
				</form>
				注意：action如果不指定url，默认提交到当前页面

	F12使用：
		F12打开开发者工具-->NetWork网络请求-->输入数据-->提交-->Headers查看请求发送方式-->payLoad(负载)查看发送数据/响应查看返回数据-->view source中是发送数据原始格式
		Consule:控制台界面	
		补充：预览-->data查看后端返回数据
				
	CSS:层叠样式表
		内部样式表
			<style type = "text/css">
				span {
					color:blue;
				}
			</style>	
		行内样式表
			<span style = "color : blue;">helloworld</span>
		外部样式表
			将CSS代码独立生成一个文件，文件后缀是.css
			myClass.css
				span {
					color:blue;
				}
			在要引用的页面上添加link标签
			<link href = "myClass.css" type = "text/css" rel = "stylesheet">

	JavaScript(JS):	
		JS：是一门跨平台，面向对象脚本语言
		JS对象：
			基础对象
				Array	不做解释
				String	不做解释
				JSON	通过JavaScript对象标记法书写的文本
					例：{
						"name":"Tom",
						"age":20,
						"gender":"male"	
					    };
					百度：JSON格式化工具
					多用于做数据载体，在网络中进行数据传输
			BOM对象(浏览器对象)
			      **Window 	浏览器窗口对象
					方法：
					alert()		消息框
					confirm()	确认框	
					setInterval()	设置指定周期调用函数	定时器
					setTimeout()	在指定的毫米数后调用函数
				Screen	屏幕对象
				Navigator  浏览器对象
				History	历史记录对象
			      **Location地址栏对象	
					window.location.href	设置或返回完整的URL

			DOM对象(文本对象)
				document	整个文档对象
				ELement		元素对象
				Attribute	属性对象
				Text		文本对象
				Comment		注释对象
			
	Ajax：
		定义：异步的JavaScript和XML
		作用：通过Ajax给服务器发送请求，并获取服务器响应的数据
		异步交互：可以在不重新加载整个页面的情况下，与后端服务器交换数据并更新网页信息的技术
		同步：
			一个进程(客户端)在执行某个请求的时候，如果该请求需要一段时间才能返回信息，
			那么这个进程会一直等待下去，直到收到(服务端)返回信息才继续执行下去（接收到返回信息才会执行下面代码）
		异步：
			不需要一直等待下去，而是继续执行下面的操作，不管其他进程的状态，
			当有信息返回的时候会通知进程进行处理（不需要等待返回信息，直接继续执行下面的操作）
		
		原生Ajax非常繁琐，Axios对原生的Ajax进行封装
			Axios需要引入axios的js文件
			Axios{
				method	发送数据形式	get/Post
				url	请求路径		get在地址后面加?数据/Post用data传递数据
				data	post请求传递参数
				.then(result){		成功回调函数
					console.log(result.data)		Axios请求成功之后自动调用的函数
				}	result.data返回的是服务器端返回的数据
			}
			
			简写：
			get:	axios.get("请求地址").then(result -> {
					console.log(result.data);
			     	})	
			post:	axios.post("请求地址","请求参数").then(result -> {
					console.log(result.data);
			     	})
	
			Ajax{
				type	发送数据形式	get/Post
				url	发送数据地址	get在地址后面加?数据/Post用data传递数据
				data	发送数据		
				async	是否同步异步
				datapyte返回的数据类型
				success	匿名函数
			}

--------------------------------------------------------------------------------------------------------------------------------------------------------------
项目管理问题：
	写项目，需引入各种jar包，尤其大工程，引用jar包有几十甚至上百，每用一个jar包，需要手动引入工程目录
	而且经常遇到jar包冲突，版本冲突问题。写完项目需要把代码与各种配置文件，资源整合到一起，打包。web项目还需要发布到服务器
			
Maven官网：http://maven.apache.orgl
Maven下载地址：http://maven.apache.org/download.cgi
Maven安装:
	配置系统变量：
		变量名：	MAVEN_HOME
		变量值:	F:\AllSoftwarePackage\Maven\apache-maven-3.6.3				maven安装目录

	配置环境变量：
		%MAVEN_HOME%\bin

Maven：apache的一个开源项目，纯java开发的项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)
	补充：
		Apache软件基金会：目前世界上最大的最受欢迎的开源软件基金会，也是一个专门为支持开源项目的非盈利组织
		POM：项目对象模型

	作用：
	1	项目构建(项目编译，编译，运行，打包，安装，部署)
	2	方便快捷管理项目依赖资源(jar包)，避免项目依赖版本冲突	
	3	创建标准目录结构
			main			主程序
				java			源代码目录
				resources		配置文件目录
			test			测试陈虚谷
				java			源代码目录
				resource		配置文件目录
			pom.xml		maven项目核心配置文件
			target文件夹	项目输出目录，编译后的class文件输出到此目录
			.gitignore	添加不被git管理的文件	例如：**/target/	 .idea  **/test/	通配符筛选文件路径
		
		
	Maven是项目管理和构建项目的工具	
		Maven仓库/Repository：	存储Maven依赖的各种jar包
		    	本地仓库：自己电脑存储jar包的仓库，连接远程仓库获取jar包依赖				本地仓库	->  Maven配置下载Maven仓库地址
			远程仓库：非本机电脑上的仓库，为本地仓库提供资源
				中央仓库：Maven团队维护的全球唯一仓库，包含所有对外发布的jar包
		     		私有仓库：公司团队搭建的私有仓库，不对外开放且公司开发人员使用同一个私服
				
		jar包查找顺序：本地仓库 -> 私服(公司仓库) -> 公共仓库 -> 中央仓库

	确定是否安装maven：win + R(控制台) -> mvn -v

	IDEA配置Maven：
		File -> Settings -> Maven：
			Maven home path：F:/AllSoftwarePackage/Maven/apache-maven-3.6.3					maven本地下载地址
			User settings File：F:\AllSoftwarePackage\Maven\apache-maven-3.6.3\conf\setting-jj.xml		maven配置文件
			Local repository：F:\AllSoftwarePackage\Maven\repository						maven本地仓库地址(Jar包依赖)

		setting文件配置：
			<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
         			  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          			  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd">

  				<localRepository>F:\AllSoftwarePackage\Maven\repository</localRepository>		Maven启动保存下载Jar包的本地仓库地址

  				<mirrors>										配置Maven使用的镜像源
    					<mirror>
      						<id>allcore-group</id>							镜像唯一标识符
      						<mirrorOf>*</mirrorOf>							镜像适用于哪些仓库，*适用于所有仓库
      						<name>allcore-group</name>						镜像名称
      						<url>http://10.10.1.117:8081/repository/allcore-group/</url>		镜像URL地址，指向实际仓库地址
    					</mirror>
    					<mirror>
      						<id>nexus-aliyun</id>							镜像唯一标识符号
      						<mirrorOf>*</mirrorOf>							镜像适用于哪些仓库，*适用于所有仓库
      						<name>Nexus aliyun</name>						镜像名称	
      						<url>http://maven.aliyun.com/nexus/content/groups/public</url>		镜像URL地址，指向实际仓库地址
    					</mirror>
  				</mirrors>
			</settings>

					
	Maven的生命周期：  双击
		清理	clean		移除上一次构建maven项目生成文件
		验证	validate	校验项目是否正确
		编译	compile		编译项目源代码，编译后的字节码文件放在target文件夹的classes目录下
		测试	test
		打包	package		双击自动对项目进行打包，将Jar包存放到项目target目录下
		验证	verify		运行任意检查验证项目包有效且达到质量标准
		安装	install		将打包好的文件安装到本地仓库
		部署	deploy		将最终项目复制到远程仓库与项目其他开发者共享
			
			补充：package -> idea控制台输出成功 -> 打开target目录 -> 选择打好的jar包(allcore-main.jar) -> 右键Open In -> Explorer -> 本地打开打好的jar包

	Maven项目构建命令：
		mvn compile		编译
		mvn clean		清理
		mvn test		测试
		mvn package		打包
		mvn install		Maven依赖(Jar包)安装到本地仓库

	创建Maven项目
		File ->  New  -> Project ->  Maven：
			Name		项目名称
			Location	项目存放路径
			GroupId		项目组织名
			ArtifactId	项目名
			version		版本号

		pom.xml文件基本配置
			<parent>			使用父项目中配置
			<project>			文件根节点
			<modelversion>			pom.xml使用模型版本
			<groupId>			项目名称
			<artifactId>			模块名称
			<version>			产品的版本号
			<packaging>			打包类型，一般有jar，war，pom等
			<name>				项目显示名
			<description>			项目描述
			<dependencies>			项目依赖配置
			<build>				项目构建配置，配置编译,插件管理

		pom.xml头信息：
			<?xml version="1.0" encoding="UTF-8"?>
			<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         			xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

			<project>			文件根节点
			xmlns				命名空间		提供避免元素命名冲突的方法
			xsi:schemaLocation		定义xmlschema的地址，xml书写时需要遵循的语法

		pom.xml文件Maven基本概念：
			<parent>标签:
				<parent>
					<artifactId>allcore-business</artifactId>		父项目模块名
					<groupId>com.allcore</grouppId>				父项目项目名
					<version>PRODUCT.1.0.0.RELEASE</version>		父项目版本号
				</parent>

			Maven坐标:
				<groupId>org.allcore.alllife</groupId>			当前Maven项目隶属组织名称
    				<artifactId>all-life-biz</artifactId>			当前Maven项目名称
    				<version>2.9.1.RELEASE</version>			当前项目版本号
				
				作用：唯一标识定义资源位置，通过标识将资源识别与下载工作交由IDEA完成

			Maven默认连接仓库配置：
				<repositories>
					<respository>
						<id>allcore-group</id>							远程仓库标识符，引用该仓库	
            					<url>http://10.10.1.117:8081/repository/allcore-group/</url>		远程仓库URL地址
            					<releases>	
                					<enabled>true</enabled>						允许该仓库下载发布版本
                					<updatePolicy>always</updatePolicy>				Maven每次构建时检查该仓库是否有更新
            					</releases>
            					<snapshots>
                					<enabled>false</enabled>					该仓库不允许下载快照版本
           					 </snapshots>
					</repository>
					<repository>
            					<id>allcore-releases</id>						远程仓库表示符，引用该仓库
            					<name>Release Repository</name>						该仓库名称
            					<url>http://10.10.1.117:8081/repository/allcore-releases/</url>		远程仓库URL地址
            					<releases>
                					<enabled>true</enabled>						允许该仓库下载发布版本
                					<updatePolicy>always</updatePolicy>				Maven每次构建时候检查该仓库是否有更新
            					</releases>
        				</repository>
				</respositories>
			
			Maven编译插件配置：
				<pluginManagement>
					<plugins>
						<plugin>
                    					<groupId>org.apache.maven.plugins</groupId>
                    					<artifactId>maven-antrun-plugin</artifactId>
                    					<executions>
                        					<execution>
                            						<phase>package</phase>
                            						<goals>
                                						<goal>run</goal>
                            						</goals>
                            						<configuration>
                                						<target>
                                    							<copy overwrite="true"
                                          						      tofile="${session.executionRootDirectory}/target/${project.artifactId}.jar"
                                          						      file="${project.build.directory}/${project.artifactId}.jar"/>
                                						</target>
                            						</configuration>
                        					</execution>
                    					</executions>
                				</plugin>
					</plugins>
				</pluginManagement>
			
			pom.xml配置文件导入依赖：				依赖：项目运行所需要的Jar包
				<dependencies>
        				<dependency>
            				<groupId>org.springframework.boot</groupId>
            				<artifactId>spring-boot-starter-web</artifactId>
					<version>2.7.15</version>
        				</dependency>
				</dependencies>							注意：导入依赖成功后，点击m(Maven) -> 🗘 刷新依赖 -> 出现Dependencies拦
				
				依赖查找地址：https://mvnrepository.com/
				依赖确实解决办法：打开Maven依赖仓库，找到对应Jar包下载

			依赖范围：依赖Jar包可以在任何地方适用，可以通过<scope></scope>标签设定Jar包作用范围
				<scope>compile</scope>		主程序/测试/打包
				<scope>test</scope>		测试
				<scope>provide</scope>d		主程序/测试
				<scope>runtime</scope>		打包
				
		依赖传递性：
			直接依赖：在当前项目中通过依赖配置建立的依赖关系
			间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源
			
			查看依赖的传递关系：
				右键 -> Diagrams -> Show Dependencies
				
		导入maven项目方式：
			小齿轮 -> Project Structure -> + -> Import Module -> 选择pom.xml文件
			右边m(Maven) -> + -> 选择pom.xml文件
		
		删除maven项目：
			右键 -> remove	删除项目，IDEA中不存在，磁盘中依旧存在


Maven高级：
	分模块设计与开发：
		将项目按照功能拆分成若干个子模块(服务)，方便项目的管理维护和扩展，也方便模块(服务)间的相互调用
			例：实体类对象单独放在一个模块/工具类单独放在一个模块
			注：先对模块功能进行设计，再进行编码

	继承/聚合/版本集中管理：
		<properties></properties>版本集中管理：			
			父工程配置版本号较多，不便于集中管理
			自定义属性：	properties属性集中管理版本号
				<properties>
					<lombok.version>1.18.24</lombok.version>
					<easypoi.version>4.1.2</poi.version>
					<commons.httpclient.version>3.1</commons.httpclient.version>
				</properties>
		
				<dependency>				
					<droupId>org.projectlombok</groupId>
					<artifactId>lombok</artifactId>
					<verison>${lombok.version}</version>			${lombok.version}对应properties标签中<lombok.version>版本号
				</dependency>
				<dependency>
            					<groupId>commons-httpclient</groupId>
            					<artifactId>commons-httpclient</artifactId>	
            					<version>${commons.httpclient.version}</version>		${commons.httpclient.version}对应properties标签中<commons.httpclient.version>版本号
        				</dependency>
				<dependency>
            					<groupId>cn.afterturn</groupId>
            					<artifactId>easypoi-spring-boot-starter</artifactId>	${easypoi.version}对应properties标签中<easypoi.version>版本号
            					<version>${easypoi.version}</version>
        				</dependency>

		继承：
			作用：子工程可以继承父工程中配置，父工程同一管理依赖，子工程可简化依赖配置

			<parent></parent>标签实现继承关系

			父工程：
				<groupId>com.allcore<groupId>				当前Maven项目隶属组织名称
				<artifactId>allcore-product-biz</artifactId>		当前Maven项目名称
				<version>PRODUCT.1.0.0.RELEASE</version>		当前项目版本号
				<description>众芯汉创底座</description>

			子工程(allcore-product-biz的子工程)/
			父工程(allcore-main的父工程)：		
				<parent>						父工程allcore-product-biz坐标
					<artifactId>allcore-product-biz</artifactId>		父工程隶属组织名称
					<groupId>com.allcore</groupId>				父工程Maven项目名称
					<version>PRODUCT.1.0.0.RELEASE</version>		父工程项目版本号
				</parent>

				<artifactId>allcore-business</artifactId>		当前Maven项目隶属组织名称
    				<name>allcore-business</name>				当前Maven项目名称
    				<version>PRODUCT.1.0.0.RELEASE</version>		当前Maven项目版本号
    				<description>众芯汉创 业务中台集合</description>
					
			子工程(allcore-business的子工程)：
				<parent>						父工程allcore-business坐标
					<artifactId>allcore-business</artifactId>		父工程隶属组织名称
					<groupId>com.allcore</groupId>				父工程Maven项目名称
					<version>PRODUCT.1.0.0.RELEASE</version>		父工程项目版本号
				</parent>

				<artifactId>allcore-main</artifactId>			当前Maven项目名称
				
		聚合：
			作用：将多个微服务组织成一个整体，同时进行项目构建(clean/package等操作)
			
			allcore-product-bl：
				allcore-common				common服务
				allcore-common-base			common-bsae服务
				allcore-common-base-api			common-base-api服务
				allcore-business			business服务
				allcore-business-api			business-api服务

			pom.xml使用<modules></modules>设置聚合工程子模块名称：	
				<modules>
					<module>allcore-common</module>
					<module>allcore-common-base</module>
					<module>allcore-common-base-api</module>
					<module>allcore-business</module>
					<module>allcore-business-api</module>
				</modules>
			
			聚合项目Maven构建目录：
				allcore-product-biz
					Lifecycle				allcore-product-biz项目Maven构建
						clean				
						validate
						compile
						test			
						package
						verify		
						install
						site
						deploy
					Plugins					Maven插件(clean-install)
						clean
						compiler
						deploy		
						site
						install	
						dockerfile			dockerfile插件需要另外配置
						spring-boot			springboot插件需要另外配置
					Dependencies				整个项目最底层依赖(间接依赖)

					allcore-business			
						Lifecycle			business服务Maven构建
							clean
							validate			
							compile
							test
							package
							verify		
							install
							site
							deploy
						Plugins				继承allcore-product-biz插件	
							clean
							compiler
							deploy		
							site
							install	
							dockerfile			
							spring-boot
						Dependencies			allcore-business服务依赖
						
						allcore-app(依次类推)
						allcore-main(依次类推)
						allcore-statistc(依次类推)
								
					
					allcore-business-api(依次类推)
					......
	
	私服：
		架设在公司局域网内部的仓库服务(服务器)，特殊的远程仓库(中央仓库)，解决公司团队内部的资源共享与资源同步操作
		程序员查找依赖：本地仓库 -> (本地仓库访问私服账号密码url)私服 -> 中央仓库
		私服配置：
			maven -> settings.xml -> 用户名/密码/url
		
		依赖jar包上传私服： 
			全球maven私服	192.168.150.101：8081
			私服仓库		Browse	
			操作：install(安装到本地仓库) -> deploy(本地仓库jar包上传到私服)
		
	工程版本管理：			
		RELEASE(发行版本)		团队向外部用户发布的稳定版本，进行后续功能开发不会改变当前发布版本内容
		SNAPSHOT(快照版本)	项目正在开发中的版本(尚未稳定、处于迭代更新中的版本)

		版本号规范:
			<主版本>.<次版本>.<增量版本>.<里程碑版本>
			
			解释：
				主版本：项目重大架构变更
				次版本：有较大功能增加还和变化，或全面系统修复漏洞
				增量版本：有重大漏洞修复
				里程碑版本：表明版本里程碑

		版本号示例：	<vaersion>PRODUCT 1.0.0.RELEASE</version>
				<description>众芯汉创公司级产品底座</description>

	跳过测试三种方式：
		mvn 命令 -D skipTests			可跳过测试执行，不会跳过编译测试代码
		mvn 命令 -D skipTest			完全跳过test阶段，包括代码编译 + 执行
		mvn 命令 -D maven.test.skip = true	跳过test执行 + 测试代码compile	
	
		
Spring家族/技术：			Spring是轻量级的控制反转(IOC)和面向切面(AOP)框架			
	三层架构：
		Controller	接收请求，获取数据，响应数据		控制层
		Service		逻辑数据处理			业务逻辑层	
		Dao		数据访问				数据访问层(持久层)
		
	分层解耦：
		内聚：软件中各个功能模块内部的功能联系
		耦合：衡量软件中各个层/模块之间的依赖，关联的程度
		软件设计原则：高内聚低耦合

	Spring核心：
		控制反转(IOC)：BeanFactory将应用程序配置(对象创建/依赖)与应用程序代码分隔开。			更多关注业务代码实现
				应用程序配置：XML文件/Java配置类/注解等负责管理对象生命周期和配置依赖关系
				应用程序代码：实际业务代码

		面向切面编程(AOP)：
			在管理bean对象的过程中，通过底层的动态代理机制，对特定的方法进行编程

		依赖注入(DI)：容器为应用程序提供运行时所依赖的资源						简化代码
				依赖：Bean对象需要依赖其他Bean或资源
				注入：Spring容器管理依赖/Spring容器自动设置和注入Bean所需的依赖			Spring容器：
														bean依赖    依赖	<->  	注入	 Bean对象
		Bean对象：IOC容器中创建，管理的对象，称之为bean							bean依赖    依赖	<->  	注入	 Bean对象	  
														bean依赖    依赖	<->  	注入	 Bean对象
		IOC：												bean依赖    依赖	<->  	注入	 Bean对象
			将当前类配置为一个对象交给IOC容器管理
			@Component	配置工具类，声明bean的基础注解
			@Component衍生注解：
				@Repository	配置dao层相关的类
				@Service	配置Service层相关的类	
				@Controller	配置Controller层相关的类

			上面声明bean的四大注解生效，需要被组件扫描注解@ComponentScan扫描
		在Springboot中启动类声明注解@SpringBootApplication已经包含@ComponentScan注解，默认扫描范围时启动类及其子包

		AOP：
			使用场景：
				记录操作日志
				权限控制
				事务管理
			
			重要概念：
				连接点：	JoinPoint	可以被AOP控制的方法
				通知：	Advice		抽取出的共性逻辑功能(最终体现为一个方法)
				切入点：	PointCut	实际被AOP(前面)控制的方法，切入点表达式execution表示切入点
				切面：	Aspect		通知 + 切入点
				目标对象：Target		通知所应用的对象

			通知类型：	在通知方法上添加注解
			     ***@Around		环绕通知		通知方法在目标方法前后执行
				@Before		前置通知		通知方法在目标方法之前执行
			     	@After		后置通知		通知方法在目标方法之后执行，无论是否有异常都执行
				@AfterReturning 返回后通知	通知方法在目标方法之后执行，有异常不执行
				@AfterThrowing	异常后通知	通知方法发生异常后执行
			

			1.添加依赖
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-aop</artifactId>
			</dependency>

			2.编写AOP程序：针对特定业务需要进行编程
			@Aspect				@Aspect:表示当前类是切面类
			public class TimeAspect{
				@Around("execution(public * *.*Service.add* (..))")	@Around指定下面共性功能加载在哪些方法上
					这里描述的方法：
						访问修饰符public的任意返回值类型的，任意包内的，名字以Service结尾的类中的，以add开头的任意入参的方法
				public Object recordTime(ProceedingJoinPoint proceedingJoinPoint) throws Throwable{
					long begin = System.currentTimeMillis();
					Object object = proceedingJoinPoint.proceed();		调用原始方法：形参固定参数调用proceed（）
					
				}
			}
			
			通知顺序：
				当有多个切面的切入点都匹配到同一个目标方法，目标方法运行时，多个通知方法都会被执行
				@Order(数字)	在切面类上添加注解
					目标方法前的通知方法：数字小的先执行
					目标方法后的通知方法：数字大的先执行
		
			切入点表达式：	描述切入点方法的一种表达式		@Around("")
				execution([访问修饰符public/protected] 返回值 包名.类名.方法名(方法参数) [throws 异常])
				通配符：	
					*	单个独立的任意符号	   	通配任意返回值，包名，类名，方法名，任意类型的一个参数
					..	多个连续的任意符号       	通配任意类型，任意个数的参数
				
				@annotation(注解全类名)
					与自定义注解联用

			连接点：
				对于@Around通知，使用ProceedingJoinPoint获取连接点信息
				其他四种通知，使用JoinPoint获取连接点信息
		
			案例：将增删改相关接口的操作日志记录到数据表中
				思路：对业务类中增删改方法添加统一功能，使用AOP技术
			
			开发：
				1.引入依赖
				2.准备表结构与实体类
				3.Mapper接口与映射XML文件
					
		DI:	
			@Autowired注解，按照类型注入，如果存在多个相同类型的bean，会报错
			
			解决方案：
				@Primary				需要让哪个bean生效就添加@Primary	类上添加
				@Qualifier("inService")			指定bean的名字			在@Autowired前面添加
				@Resourece(name = "inService")		按照名称注入

			实际开发：
				@Autowired/@Resource  <==>  @RequiredArgsConstructor/@AllArgsConstructor + private fianl IUserService userService
				private CommonService commonService = SpringUtil.getBean(CommonService.class);
				

			
开发规范：
	1.所有业务方法名尽量规范，查询类方法都是find开头，更新类方法都是update开头
	2.切入点execution在满足业务需要前提下，尽量缩小切入点的匹配范围
	