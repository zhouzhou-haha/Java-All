Spring Cache：		Spring框架提供的基于注解的缓存功能
	Spring Cache核心接口：		Spring Cache提供一套缓存抽象机制，底层可以切换不同的缓存(Redis)实现
		org.springframework.cache.CacheManager：
			CacheManager接口负责管理和配置缓存，为缓存操作提供统一的管理接口
			Spring提供多种CacheManager实现(ConcurrentMapCacheManager,EhCacheCacheManager,RedisCacheManager)

		org.springframework.cache.Cache：
			Cache接口规定缓存标准基本操作(存储，读取，删除缓存项)
			Spring提供多种Cache实现(RedisCache,EhCacheCache,ConcurrentMapCache)
			

	缓存：临时存储机制(通过减少数据访问延迟，提高系统响应速度)，用于在内存(本地磁盘)中保存频繁访问的数据

	缓存成本：	缓存需要占用系统内存资源，过多缓存影像其他应用程序性能
			缓存的数据可能与数据库中的数据不一致，需要设计有效缓存失效策略保证数据一致性
			缓存机制会增加系统复杂性(处理缓存管理，更新和失效问题)
			缓存系统需要定期监控和维护
		
	Spring Cache原理：
		查询数据首先查看缓存里面是否有对应数据，如果有返回缓存中的数据；如果缓存中没有对应的数据，执行方法获取数据并将获取的数据存入缓存

	Spring Cache常用注解：
		@EnableCaching			启动类		开启缓存注解功能，
		@Cacheable			方法上		在方法执行前查询缓存中是否有数据，如果有数据，直接返回缓存数据；没有数据，调用方法将返回值放到缓存中
		@CachePut			方法上		将方法的返回值放到缓存中	
		@CacheEvict			方法上		将一条或多条数据从缓存中删除
		@CacheConfig			类		在类上定义缓存配置，与@Cacheable，@CachePut，@CacheEvict注解一起使用
		@Caching			方法上		组合多个缓存相关注解(@Cacheable,@CachePut,@CacheEvict),允许对方法的缓存进行更复杂配置
			@Caching{
				cacheable = @Cacheable(cacheNames = "itemsCache",key = "#id")
				evict = @CacheEvict(cacheNames = "otherCache",allEntries = true)
			}

	Spring Cache注解属性：
		@Cacheable	value/cacheNames	指定缓存名称
				key			定义缓存键，支持SpEL表达式
				keyGenerator		指定自定义键生成器(生成缓存键)		key/keyGenerator二选一
				cacheManager		指定自定义缓存管理器(指定缓存实现)
				cacheResolver		指定自定义缓存解析器(解析缓存实现)
				condition		条件满足才缓存，支持SpEL表达式
				unless			条件满足不缓存，支持SpEL表达式

		@CachePut	value/cacheNames	指定缓存名称
				key			定义缓存键，支持SpEL表达式
				keyGenerator		指定自定义键生成器(生成缓存键)		key/keyGenerator二选一
				cacheManager		指定自定义缓存管理器(指定缓存实现)
				cacheResolver		指定自定义缓存解析器(解析缓存实现)
				condition		条件满足才缓存，支持SpEL表达式
				unless			条件满足不缓存，支持SpEL表达式
		
		@CacheEvict	value/cacheNames	指定缓存名称
				key			定义缓存键，支持SpEL表达式
				keyGenerator		指定自定义键生成器(生成缓存键)		key/keyGenerator二选一
				cacheManager		指定自定义缓存管理器(指定缓存实现)
				cacheResolver		指定自定义缓存解析器(解析缓存实现)
				condition		条件满足才缓存，支持SpEL表达式
				unless			条件满足不缓存，支持SpEL表达式
				allEntries		true(清空所有缓存数据)/false(不清空所有缓存数据)
				beforeInvocation	true(方法执行前清空所有缓存数据)/flase(默认，方法执行前不清空所有缓存数据)

		@CacheConfig	value/cacheNames	指定缓存名称
				cacheManager		指定自定义缓存管理器(指定缓存实现)
				keyGenerator		指定自定义键生成器(生成缓存键)
				cacheResolver		指定自定义缓存解析器(解析缓存实现)

	SpringBoot整合Spring Cache和Redis：
	1.引入依赖
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>			Spring Cache缓存依赖
			<version>2.7.3</version>	
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>	
			<artifactId>spring-boot-starter-redis</artifactId>			redis依赖
		</dependency>

	2.使用注解	
	@CachePut:将方法返回值存放到内存(Redis)中
		@CachePut(cacheNames = "userCache",key = "#user.id(SpEL表达式)")			key值：cacheNames::key(key动态生成)
		public User save(@RequestBody User user){
			userMapper.insert(user); 
			return user;
		}
			补充：key动态生成使用SpEL(Spring Expression Language)Spring提供的表达式语言		
			     : 一个冒号生成一个中间文件夹	a:b:c:d		a -> b -> c -> d -> a:b:c:d	

	@Cacheable:在方法执行前查询数据是否有数据，如果有数据，直接返回缓存数据；没有数据，调用方法将返回值放到缓存中
		@Cacheable(cacheNames = "userCache",key = "#id")				key值：cacheNames::key(key动态生成)
		public User getById(Long id){
			User user = userMapper.getById(id);
			return user;		
		}

	@CacheEvict:将一条或多条数据从缓存中删除
		@CacheEvict(cacheNames = "userCache",key = "#id")				key值：cacheNames::key(key动态生成)
		public void deleteById(Long id){
			userMapper.deleteById(id);
		}

		@CacheEvict(cacheNames = "userCache",allEntries = true)				allEntries = true：清除内存中所有键值	
		public void deleteById(Long id){
			userMapper.deleteAll();
		}




Spring Task：		Spring框架提供的轻量级定时任务调度工具		任务调度：按照约定时间自动执行某代码逻辑
定时任务：
	应用场景：	
		管理系统定时生成报表
		银行贷款每月还款提醒
		订单未支付自动取消
		入职纪念日为用户发送通知	
		数据备份
		

	@Scheduled：支持在固定时间间隔，指定时间点或Corn表达式下执行任务
		属性：	fixedRate = 5000(ms)		每隔指定时间执行一次
			fixedDelay = 5000		上一个任务完成后，等待指定时间执行再次执行
			initialDelay = 10000		定时任务启动后，等待一定时间再开始执行
			cron = ""			Cron表达式定义任务的执行时间

	Corn表达式：		定义任务触发的时间的字符串格式
		Corn表达式构成：六或七个字段组成，每个字段表示不同的时间单位
		
		Corn表达式格式：秒 分 时 日 月 星期 [年]				生成Corn表达式：百度在线Corn表达式生成器
			秒	0-59			表示秒数
			分	0-59			表示分钟数
			时	0-23			表示小时数
			日	1-31			表示月份中的日期
			月	1-12/JAN-DEC		表示月份			
			星期	0-6/SUN-SAT		表示星期几，0表示星期天
			年	1970-2099		表示年份(可省略)

		Corn表达式通配符：
			*	代表任何值
			,	用于分割多个值
			-	用于指定一个范围的值
			/	用于指定增量
			？	表示不指定具体值(通常用于日和星期字段中避免冲突)
			L	表示"最后"(在日和星期字段中使用)
			W	表示最近的工作日
			#	表示"第几个星期几"
				
	Spring Task使用定时任务：
		1 引入依赖
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>		SpringBoot启动依赖已经包括spring-context和spring-core依赖
		</dependency>

		2 启动类开启定时任务功能@EnableScheduling		
		@SpringCloudApplication
		@EnableScheduling
		public class MainBusinessApplication {	
			public static void main(String[] args) {
				BladeApplication.run(LauncherConstant.APPLICATION_MAIN_BUSINESS_NAME, MainBusinessApplication.class, args);
			}
		}
		
		3 @Scheduled注解自定义定时任务		补充：实际开发中定时任务类专门放在配置包config/定时任务包下Schedule下
		@Component			将定时任务类配置为Bean交给Spring容器管理
		@Slf4j
		public class ScheduledTask{
			
			@Scheduled(定时任务Corn表达式)
			public void executeTask(){
				定时任务方法逻辑		
			}
		}
	
	Spring Task多线程处理定时任务(配置线程池)：			Spring Task默认单线程
		已知条件：
			定时任务1：添加sleep方法			
			定时任务2：不添加sleep方法		
		
			单线程执行：定时任务1(sleep响应) -> 定时任务2			缺点：浪费cpu时间
		
		处理方案：SpringTask配置线程池
			@Configuration
			public class SchedulingConfig implements SchedulingConfiguration{
				@Override
				public void configureTasks(ScheduledTaskRegistrar taskRegistrar){
					threadPoolTaskScheduler.setPoolSize(10);					设置线程池大小
        				threadPoolTaskScheduler.setThreadNamePrefix("my-scheduled-task-pool-");		设置线程名称前缀，识别创建的线程
        				threadPoolTaskScheduler.initialize();						初始化调度器，使其开始工作并处理任务
					taskRegistrar.setScheduler(threadPoolTaskScheduler)
				}
			}
				补充：定时任务数量不能超过配置线程池中线程数量

	Spring Task实际开发：
		@Scheduled(cron = "0 0 1 * * ?")
   	 	@Transactional(rollbackFor = Exception.class)
    		@Override
    		public void getPositionDevice() {
        		// 定时请求更新台账
        		PositionDeviceRequest request = new PositionDeviceRequest();
        		request.setObjId(1100);
        		R result = OpenAPIUtil.request(machineProperties.getRasHttpHost(), OpenAPI.POSITION_API, request);
        		if (result.isSuccess()) {
            		    if (result.getData() != null) {
                		List<PositionDeviceResponse> positionDeviceDTOS = JSONUtil.toList(JSONUtil.toJsonStr(result.getData()), PositionDeviceResponse.class);
                		if (CollectionUtil.isNotEmpty(positionDeviceDTOS)) {
                    		    // 若有删除的设备先同步删除
                   		    List<String> rasIds = positionDeviceDTOS.stream().map(PositionDeviceResponse::getId).collect(Collectors.toList());
                    		    List<String> ids = positionDeviceMapper.selectAllIds();
                    		    List<String> removeIds = ids.stream().filter(id -> !rasIds.contains(id)).collect(Collectors.toList());
                    		    if (CollectionUtil.isNotEmpty(removeIds)) {
                        		positionDeviceMapper.deleteBatchIds(removeIds);
                    		    }
                    		    // 属性拷贝
                    		    List<PositionDevice> positionDevices = BeanUtil.copy(positionDeviceDTOS, PositionDevice.class);
                    		    // 单位填充
                    		    if (CollectionUtil.isNotEmpty(positionDevices)) {
                        		positionDevices.forEach(e -> {
                            		    Dept dept = SysCache.getDept(e.getStid());
                            		    if (dept != null) {
                                		e.setDeptCode(dept.getDeptCode());
                            		    }
                       			 });
                        		// 台账入库
                        		this.saveOrUpdateBatch(positionDevices);
                    		    }
                		}
            		    }
        		}
    		    }


Spring WebSocket：	
	WebSocket：基于TCP的新网络协议，实现浏览器与服务器全双工通信，用于Web应用程序和服务器之间建立实时，双向通信连接。
			通过单一的TCP连接提供持久化连接，使Web应用程序实时传递数据				

	全双工：	浏览器  <--发送消息-->  服务器		服务器主动发送消息给客户端浏览器		

	WebSocket应用场景：	视频弹幕		`	<--	实时传递数据
				网页聊天			<--	实时传递数据
				体育实况更新		<--	实时传递数据
				股票基金报价实时更新	<--	实时传递数据
				系统实时通告		<--	实时传递数据

	WebSocket生命周期:
		建立连接阶段	建立客户端和服务器之间的WebSocket连接，客户端发送一个WebSocket握手请求，服务端响应一个握手响应
		连接开放阶段	WebSocket连接已经建立并开放，客户端和服务器可以在连接上互相发送数据
		连接关闭阶段	WebSocket连接即将被关闭。由客户端或服务器发起，通过发送一个关闭帧关闭连接
		连接关闭完成阶段	WebSocket连接已经完全关闭。客户端和服务器之间的任何交互都无效

		简单WebSocket生命周期示意图：
			Client					Server	
				  →	WebSocket握手请求	   →
			连接建立		      &&		连接建立
				  ←	WebSocket握手响应   ←
			   ↓
			连接开放	  ←	    数据通信   	   →	连接开放
			   ↓	
			连接关闭	  →	Client发送关闭帧	   →
					      ||				连接关闭：网络故障，服务器奔溃等
				  ←	Server发送关闭帧	   ←	连接关闭
			   ↓
			连接关闭完成	WebSocket连接关闭完成	连接关闭完成
				
	WebSocket消息格式：	消息头和消息体		WebSocket由一个或多个帧组成
		消息头/帧格式：
			FIN		1bit，1表示这是一个完整的消息；0表示这是消息的一部分
			Opcode		表示消息的类型，包括文本消息，二进制消息
			Mask		消息是否加密
			Payload length	表示消息体的长度
			Masking kye	仅在消息需要加密时出现，用于对消息进行解密
			payload Data	消息体(实际传输的数据)

		消息体：	实际传输的数据，可以是文本或二进制数据
		
		服务器向客户端发送的数据：
			文本消息(文本字符串)			session.getBasicRemote().sendText("Hello World")
			二进制消息				session.getBasicRemote().sendBinary(buffer);

	WebSocket相关注解:
		@ServerEndPoint("/echo")			将Java类标记为WebSocket端点
		@OnOpen						标记方法WebSocket连接建立，处理连接打开事件(获取Session对象，允许进行发送接收消息，管理连接)
		@OnMessage					标记方法为WebSocket消息处理方法，接收处理从客户端发送的消息，并触发后续处理(推送消息)
		@OnClose					标记方法WebSocket连接关闭，处理连接关闭事件(处理连接关闭后的逻辑)
		@OnError					处理连接中的异常和错误(WebSocket连接出现问题时，调用@OnError注解方法)

	注解属性：
		@ServerEndPoint()
			value = "/chat"				指定WebSocket端点的URI路径(WebSocket客户端连接到WebSocket服务器路径)	
			configurator = "xxx.class(字节码文件)"	指定自定义配置器处理WebSocket握手过程
			encoders = "xxx.class(字节码文件)"	指定一个或多个编码器，将Java对象编码成WebSocket消息格式(JSON/XML)
						
	WebSocket实现：		websocket主动推消息给客户端	
		1 引入依赖
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

	*****	2.编写WebSocket服务端
		@Service									将WebSocket服务端交给Spring容器管理	
		@ServerEndpoint(value = "/echo",configurator = "HttpSessionConfig.class")	configurator指定自定义配置器
		public class EchoServer {
 
    			@OnOpen							
    			public void onOpen(Session session) {			
        			System.out.println("WebSocket 连接已经建立。");	
    			}							
 
    			@OnMessage										@OnMessage注解只有接收客户端消息之后才能向客户端发送消息
    			public void onMessage(String message, Session session) throws IOException {
        			System.out.println("收到客户端消息：" + message);
       				session.getBasicRemote().sendText("服务器收到消息：" + message);
    			}
				补充：@OnMessage使WebSocket服务器能够响应客户端的请求
 
    			@OnClose
    			public void onClose() {
        			System.out.println("WebSocket 连接已经关闭。");
    			}
 
    			@OnError
    			public void onError(Throwable t) {
        			System.out.println("WebSocket 连接出现错误：" + t.getMessage());
    			}		

			//给每个客户端推送消息
			public static void sendMessage(String message, HashSet<String> toSids) {		sendMessage方法用于直接向连接的客户端发送消息
            			for (WebSocketService item : webSocketSet) {					session集合遍历
                			try {
                    				if (toSids.contains(item.sid)) {
                        				log.info("[WebSocket]广播消息:{}",message);
                        				item.sendMessage(message);
                    				}
                			} catch (IOException e) {
                    				e.printStackTrace();
                			}
            			}

    			}

			public void sendMessage(String message) throws IOException {
        			synchronized (this.session){
            				this.session.getBasicRemote().sendText(message);			服务器使用session.getBasicRemote().sendText()推送消息给客户端
        			}
    			}

		3.编写配置类，注册WebSocket的Bean	
		@Configuration
		public class WebSocketConfig extends HttpSessionHandshakeInterceptor {
    			@Bean
    			public ServerEndpointExporter serverEndpointExporter() {
       				return new ServerEndpointExporter();
    			}
		}
		
		4.编写定时任务类
		@Component
		public class WebSocketTask{

			@Autowired
			private EchoServer echoServer；

			@Scheduled(cron = "Cron表达式")			
			public void executeTask(){
				定时任务逻辑
			}
		}

		5.具体服务实现类使用WebSocket服务推送消息给客户端
		public class patentInfoServiceImpl{
			@Autowired
			private EchoServer echoServer；				注入WebSocket服务端

			//WebSocket服务器向客户端推送JSON消息
			echoServer.sendMessage(JSON.toJSONString());

			
		补充：
			@ServerEndPoint(configurator = "xxx.class")
				指定自定义配置器，处理WebSocket握手过程，允许在握手过程中修改或添加自定义属性

			@Configuration + @EnableWebSocket
				在Spring环境中注册和配置WebSocket处理器
	
	HTTP协议与WebSocket协议对比：
		不同点：
			HTTP是短链接(不实时更新数据)	
			WebSocket是长连接(持久化连接，实时更新数据)

			HTTP通信时单向的，基于请求响应模式
			WebSocket支持双向通信

			HTTP适合少量数据交换
			WebSocket适合大量数据实时交换

		相同点：
			HTTP和WebSocket底层都是TCP连接
	
*****	WebSocket发送消息全流程实际开发：
		1.添加WebSocket相关依赖
		2.WebSocket发送消息全流程
	
		1.添加WebSocket相关依赖
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-websocket</artifactId>
			</dependency>	

		2.1 Redis的Publish消息发送到Redis指定Channel频道
			String warnKey = DEVICE_CATEGPRY + deviceDetail.getDeviceId() + SpringPool.DASH + newWn.getWarnCategory();
			if(allcoreRerdis.getRedisTemplate().opsForValue().setIfAbsent(warnKey,devcieDetail.getDevcieId(),timeout,TimeUnitMINUTES)){
				MessageFrame<WarnMessageDTO> msg = new MessageFrame<>();					设置消息,传参implements Seriable将字符串转换为字节数据
				msg.setMessageType(BizDictEnum.MESSAGE_TYPE_ALARM.getCode());				
				msg.setmessageBody(dto);
				allcoreRedis.getRedisTemplate().convertAndSend(Constant.ALARM_CHANNEL,msg)			将消息发送到Redis指定Channel		
			}

			解释：	allcoreRerdis.getRedisTemplate().opsForValue().setIfAbsent(warnKey,devcieDetail.getDevcieId(),timeout,TimeUnitMINUTES)
				若Redis中没有warnKey键，将deviceDetail.getDeviceId()设置为warnKey值并设置过期时间


		2.2 编写消息监听类，监听Redis中的频道消息,并将消息转发给指定消息处理器
			@Bean
			RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory,MessageListenerAdapter listenerAdapter){
				RedisMessageListenerContainer container = new RedisMessageListenerContainer();
				container.setConnectionFactory(connectionFactory);						设置Redis连接工厂，获取连接到Redis服务器
				container.addMessageListener(listenerAdapter,new ChannelTopic(ALARM_CHANNEL));			订阅ALERM_CHANNEL频道，指定消息监听器
				container.addMessageListener(listenerAdapter,new ChannelTopic(POINT_CHANNEL));			订阅POINT_CHANNEL频道，指定消息监听器
				container.addMessageListener(listenerAdapter,new ChannelTopic(TRACK_CHANNEL));			订阅TRACK_CHANNEL频道，指定消息监听器
			}
			
			@Bean
			MessageListenerAdapter listenerAdapter(RedisMessageSubscriber subscriber){			
				return new MessageListenerAdapter(subscriber,"onMessage");					传递消息，指定消息处理方法onMessage
			}
		
		2.3 Redis的Subscribe订阅指定频道消息
			@Service
			@RequiredArgsConstructor
			@Slf4j
			public class RedisMessageSubscriber implements MessageListener{
				private final AllcoreRedis allcoreRedis;
				private final SimpleMessagingTemplate simpleMessagingTemplate;

				@Override
				public class onMessage(Message message,byte[] pattern){
					String channel = allcoreRedis.getRedisTemplate().getStringSerializer().deserialize(message.getChannel());	将字节数据反序列化为字符串
					String msg = allcoreRedis.getRedisTemplate().getStringSerializer().deserialize(messgae.getBody());		将字节数据反序列化为字符串	
					log.info("监听成功，频道channel={}，消息msg={}"，channel，msg);	
					try{
						if(StringUtil.equals(channel,Constant.ALARM_CHANNEL)){
							simpleMessagingTemplate.convertAndSend("topic/alarm",msg);		WebSocket发送消息到指定主题
						}else if(StringUtil.equals(channel,Constant.TRACK_CHANNEL)){			
							simpleMessagingTemplate.convertAndSend("topic/track",msg);		WebSocket发送消息到指定主题
						}
					}catch(Exception e){
						log.info("处理消息异常");
					}
				}
			}
			
		2.4 WebSocket配置客户端连接地址/可接受消息主题/消息拦截器
			@Configuration
			@EnableWebSocketMessageBroker										@EnableWebSocketMessageBroker：启用WebSocket消息代理
			public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{

				@Autowired
				private WebSocketAuthInterceptor webScoketAuthInterceptor；
			
				@Override
				public void registerStompEndpoints(StompEndpointRegistry registry){
					registry.addEndpoint("/wss")								注册WebSocket端点，客户端通过ws://<host>/wss建立连接
						.setAllowedOriginPatterns("*")							允许所有来源的跨域请求
						.withSockJS();									SockJS，浏览器不支持WebSocket回退方案
				}
				
				@Override
				public void configureMessageBroker(MessageBrokerRegistry config){
					config.enableSimpleBroker("/topic"，"/queue");						配置客户端可接收消息主题前缀：/topic、/queue
				}												可接收主题：/topic/*、/queue/*

				@Override
				public void configureClientInboundChannel(ChannelRegistration registration){
					registration.interceptors(webSocketAuthInterceptor);					消息拦截器，在消息到达客户端之前对消息权限验证
				}
			}
		
		2.5 编写消息拦截器webSocketInterceptor，对从客户端的请求权限认证，确保只有携带有效认证的客户端信息可以建立WebSocket连接
			@Component
			@Slf4j
			@requiredArgsConstructor
			public class WebSocketAuthInterceptor implements ChannelInterceptor{
				private final WebSocketManager webSocketManager;
				private final JetProperties jwtProperties;
				
				@Override
				public Message<?> preSend(Message<?> message,MessageChannel channel){
					StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);
					if(accessor != null && StompCommand.CONNECT.equals(accessor.getCommand())){
						String bladeAuth = accessor.getFirstNativeHeader(TokenConstat.HEADER);
						if(StringUtil.isNotBlank(bladeAuth)){
							String token = JwtUtil.getToken(bladeAuth);
							Claims claims = JwtUtil.parseJWT(token);
							if(token == null || claims == null){
								log.error("============请求未授权==========")
								return null
							}
							String userId = String.valueOf(claims.get(TokenConstant.USER_ID))

							if(jwtProperties.getState()){
								String tenantId = String.valueOf(claims.get(TokenConstant.TENANT_ID));
                   						String accessToken = JwtUtil.getAccessToken(tenantId, userId, "web", token);
                    						if (!token.equalsIgnoreCase(accessToken)) {
                        						log.error("===============令牌已失效====================");
                        						return null;
								}
                    					}
							Principal principal = () -> userId + "_" + accessor.getSessionId();
                					accessor.setUser(principal);
                					webSocketManager.addUser(principal.getName());
                					return message;
						}
						log.error("===============缺失令牌,鉴权失败====================");
            					return null；

					}
					return message；
				}

				@Override
				public void postSend(Message<?> message,MessageChannel channel,boolean sent){
					StompheaderAccessor accessor = StompHeaderAccessor.wrap(message);
					Principal principal = accessor.getUser();
					if(){
						return；
					}
					switch(accessor.getCommand()){
						case CONNECT：
						    break；
						case CONNECTED:
						    break；
						case DISCONNECT：
				   		    if (principal != null) {
                    					webSocketManager.deleteUser(principal.getName());
                				    }
                				    break;
            					default:
                				    break;
					}
				}			
	
			}

	WebSocket测试消息Pub/Sub：
		1.使用WebSocket测试工具：百度搜索WebSocket在线测试工具
		2.地址：ws://localhost:19100/wss，发送消息每隔自行设置时间发送消息
		

			

	












;