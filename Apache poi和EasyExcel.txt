Apache POI和EasyExcel：	主要用于Excel表格的导入导出

	Apache POI：	Aaache软件基金会开放源码函式库，POI提供API给Java程序支持读写(导入导出)Microsoft Office格式的文件(主要用于处理Excel文件，格式：.xls和.xlsx)
	EasyExcel：	高性能的Java库(不会出现内存溢出)，主要用于读写(导入导出)Excel文件(主要用于处理大数据量Excel文件，格式：.xlsx)
	
	Aapche POI官网：https://poi.apache.org/download.html
	Easyexcel官网：https://easyexcel.opensource.alibaba.com/
	
	
	相关概念：
		Workbook		Excel工作簿14:37 2024/9/6
		Sheet			Sheet工作表/Sheet页
		Row			Sheet表中的行
		Cell			Sheet表中的单元格
		HSSFWorkbook类		处理旧版Excel格式(.xls文件)			补充：	.xls最多65536行数据，数据量超出会报异常
		XSSFWorkbook类		处理新版Excel格式(.xlsx文件)				.xlsx没有数据量限制，耗时较长
		SXSSFWorkbook类		处理大数据量Excel格式(.xlsx文件)				SXSSFWorkbook类写数据速度更快，占用内存更少

SpringBoot整合Apache POI：
	1.引入Apache POI依赖
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>	
			<version>5.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>	
			<artifactId>poi-ooxml</artifactId>
			<version>5.0.0</version>
		</dependency>

	2.使用Apache POI
	写操作下载导出)：往Excel中添加系统数据
		HSSFWorkbook xlsExcel = new HSSFWorkbook();				在内存中创建.xls的Excel文件
		XSSFWorkbook xlsxExcel = new XSSFWorkbook();				在内存中创建.xlsx的Excel文件
		SXSSFWorkbook xlsxExcel = new SXSSFWorkbook();				数据流式分批写入临时文件

		HSSFSheet xlsSheet = xlsExcel.createSheet("专利授权")			Excel工作簿中创建Sheet页/表，参数指定Sheet表名
		XSSFSheet xlsxSheet = xlsxExcel.createSheet("专利授权")			Excel工作簿中创建Sheet页/表，参数指定Sheet表名
		
		HSSFRow xlsRow = xlsSheet.createRow(0)					Sheet中创建行对象；行：参数 + 1，参数：0 -> 行数：1
		XSSFRow xlsxRow = xlsxSheet.createRow(0)				Sheet中创建行对象；行：参数 + 1，参数：0 -> 行数：1
		
		HSSFCell xlsCell = xlsRow.createRow(0)					Row中创建单元格；单元格：参数 + 1，参数：0 -> 单元格数：1
		XSSFCell xlsxCell = xlsxRow.createRow(0)				Row中创建单元格；单元格：参数 + 1，参数：0 -> 单元格数：1		
																	
		xlsCell.setCellValue();							设置单元格内容							
		xlsxCell.setCellValue();						设置单元格内容

			合并：xlsRow.createRow(0).setCellValue("姓名")			创建单元格设置单元格内容
			     xlsxRow.createRow(0).setCellValue("民族")			创建单元格设置单元格内容

		try (FileOutputStream fileOut = new FileOutputStream("D:工作\\info.xls")) {	将xlsExcel从内存写入D磁盘info.xls文件中
            		xlsExcel.write(fileOut);
        	} 
		try (FileOutputStream fileOut = new FileOutputStream("D:工作\\info.xlsx")) {	将xlsxExcel从内存写入D磁盘info.xlsx文件中
            		xlsxExcel.write(fileOut);
        	}

		fileOut.close();						关闭流
		xls(x)Excel.close();						关闭Excel
		workbook.dispose();						SXSSFWorkbook清除临时文件


	读操作(导入)：将Excel内容添加到系统
		HSSFWorkbook xslExcel = new HSSFWorkbook(new FileInputStream("D:\\工作\\info.xls")) ;		使用Apache POI读取D磁盘上info.xlsExcel文件
		XSSFWorkbook xslxExcel = new XSSFWorkbook(new FileInputStream("D:\\工作\\info.xlsx"));		使用Apache POI读取D磁盘上info.xlsxExcel文件

		HSSFSheet xlsSheet = xlsExcel.getSheetAt(0);							获取Excel中第一个Sheet页，Sheet页：参数 + 1，参数：0 -> Sheet页：1
		XSSFSheet xlsxSheet = xlsxExcel.getSheetAt(0);							获取Excel中第一个Sheet页，Sheet页：参数 + 1，参数：0 -> Sheet页：1

		HSSFRow xlsRow = xlsSheet.getRow(0);								获取Sheet页中第一行，Row行：参数 + 1，参数：0 -> Row行：1
		XSSFRow xlsxRow = xlsxSheet.getRow(0);								获取Sheet页中第一行，Row行：参数 + 1，参数：0 -> Row行：1

		HSSFCell xlsCell = xlsRow.getCell(0);								获取Row行中第一个单元格，Cell单元格：参数 + 1，参数：0 -> Cell单元格：1
		XSSFCell xlsxCell = xlsxRow.getCell(0);								获取Row行中第一个单元格，Cell单元格：参数 + 1，参数：0 -> Cell单元格：1	

		xlsCell.getStringCellValue();									获取单元格内容
		xlsxCell.getStringCellValue();									获取单元格内容

		......												将单元格数据插入到表

		单元格值数据类型：
			String			字符串类型				getStringCellValue()		获取String类型单元格的值
			Numeric			数值类型(包括日期)			getNumericCellValue()		获取Numeric类型单元格的值	
			Boolean			布尔值类型				getBooleanCellValue()		获取Boolean类型单元格的值
			Formula			公式					getCellFormula()		获取Formula类型单元格的值
			Error			错误					getErrorCellValue()		获取Error类型单元格的值
			Blank			空单元格					无
	
			判断Cell值类型：
				Cell cell = row.getCell(i);
				if(Cell != null){
					switch(cell.getCellType()){
						case STRING:

							break；
						case Boolean:

							break；
					}
				}
			
		补充：	
		根据Row行获取Cell单元格内容：
			Row row = sheet.getRow(0);
			int cellNmber = row.getPhysicalNumberOfCells();			getPhysicalNumberOfCells()获取实际包含数据单元格的数量
			for(int i = 0;i < cellNumber;i++){
				Cell cell = row.getCell(i);
			}
		
		根据Sheet页获取Row行内容：
			int rowNumber = sheet.getPhysicalNumberOfRows();		getPhysicalNumberOfRows()获取实际包含数据行的数量
			for(int i = 1;i < rowNumber;i++){
				Row row = sheet.getRow(i);
			}
		
	

Apache POI问题和优点：
	问题：	导出100w条数据，先将数据加载到内存(XSSF：OOM内存溢出)，再写入文件
		读写大型Excel数据文件，会比较慢(一次性全部加载到内存)
				
	优点：	功能全面，支持多种Office文件格式的库

Easyexcel问题和优点：
	问题：	功能不如Apache POI全面

	优点：	简洁API设计
		支持高性能，大数据量Excel文件处理(从磁盘一行行读取数据)

SpringBoot整合EasyExcel：			快速简单避免OOM的java处理Excel工具
	EasyExcel在实体类上常用注解：
		@ExcelIgnore							标记字段在读写Excel时被忽略
		@ExcelIgnoreUnannotated						标记类，表示类中所有未标记@ExcelProperty的字段在读写时被忽略
		@ExcelProperty(列名)						指定字段对应的Excel列名或索引
		@ExcelWith(列宽)						设置Excel表格单个字段列的宽度
		@ColumnWidth(全局宽度)						设置Excel表格列的宽度
		@HeadStyle(fontStyle = FontStyle.BLOD)				定义表头的样式(字体颜色)
		@ContentStyle(fontStyle = FontStyle.ITALIC)			设置单元格内容样式
		@ContentRowHeight(内容高度)					设置单元格内容高度
		@ExcelPropertyOrder("字段1","字段2","字段3")			指定Excel列的顺序
		@ExcelFormat("yyyy-MM-dd")/@DateTimeFormat("yyyy-MM-dd")	指定数据格式(日期格式)
		@ExcelCollection						标记字段是Excel数据集合
		
	1.引入依赖
	<dependency>
		<groupId>com.alibaba</groupId>
    		<artifactId>easyexcel</artifactId>
   	 	<version>3.1.3</version>
	</dependency>

	2.使用EasyExcel
	写操作(下载导出)：往Excel中添加系统数据
		public void exportExcel(HttpServletResponse response) throws IOException{
			response.setContentType("application/vnd.ms-excel");				设置HTTP响应内容格式：Excel文件		
			response.setCharacterEncoding("utf-8");						设置HTTP响应字符编码：UTF-8
			response.setHeader("Content-disposition","attcahment;filename=demo.xlsx");	设置响应头Content-disposition属性，指定文件处理方式，下载文件名
			EasyExcel.write(response.getOutputStream(),xxx.class).sheet(工作表名).doWrite(数据);
		}

		解析：	Content-Disposition：attachment		响应内容作为附件下载
			filename：demo.xlsx			指定下载文件的默认文件名dmeo.xlsx
			response.getOutputStream()		获取HTTP响应输出流，将Excel数据写入该输出流
				补充：这边也可以将response.getOutputStream()替换成具体的文件路径
			xxx.class				指定将Excel文件内容映射到Excel类
			sheet(表名)				在Excel文件中创建sheet表
			doWrite(数据)				将数据写入Excel文件中

	读操作(导入)：将Excel内容添加到系统，支持大数据量导入，提供监听器机制
		1.编写监听器类	
		@Component
		public class excelDataListener extends AnalysisEventListener<Excel实体类>{

			@Override
			public void invoke(Excel实体类 data,AnalysisContext context){			invoke方法：EasyExcel读取每一行数据，对数据进行处理
				
			}

			@Override
			public void doAfterAllAnalysed(AnalysisContext context){			doAfterAllAnalysed方法：Excel所有数据被读取完调用
				
			}
		}

		解析：	参数data			当前读取到的Excel实体类对象，表示Excel文件一行数据
		     	参数context		读取过程的上下文信息

		2.编写业务层逻辑
    		public String importExcel(MultipartFile file) throws IOException {
        		EasyExcel.read(file.getInputStream(), Excel实体类.class, new ExcelDataListener(uploadDAO)).sheet().doRead();
        		return "success";
    		}
		
		解析：
			file.getInputStream()		获取Excel文件输入流，将Excel文件中的数据映射到Excel实体类输出	
				补充：这边也可以将file.getInputStream()替换成具体的文件路径
			Excel实体类.class		Java类，Excel文件中的每一行数据会被映射成这个类的实例
			new ExcelDataListener()		执行监听器逻辑，处理每一行Excel数据
			sheet(表名)			指定读取的Excel表单，不指定表单默认读取第一个表
			doRead()			执行读取操作，将Excel文件数据读取到指定Java对象

				

	





















