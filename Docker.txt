Docker：		快速构建运行管理应用的工具，部署项目到单个服务器或者项目所需要的组件的运维工具
	大型项目组件比较多，运行环境比较复杂，部署项目会出现问题：
		依赖关系复杂，容易出现兼容性问题
		开发，测试，生产环境有差异
		
	docker解决依赖兼容问题：
		将应用的函数库(Libs)，依赖(Deps),配置与应用一起打包，形成镜像可迁移到任意Linux操作系统
		将每个应用放到一个隔离容器运行，避免互相干扰

	docker解决开发，测试，生产环境差异问题：
		docker镜像包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行
	
	概念：
		镜像(Image)：Docker将应用程序及其所需依赖，函数库，环境，配置等文件打包，可直接运行
		容器(Container):Docker会在运行镜像时创建一个隔离环境，称为容器
		仓库(Repository):存储和管理镜像的平台

		打包：将软件运行所需的依赖，第三方库，软件打包到一起，变成一个安装包
		分发：将打包好的"安装包"上传到镜像仓库，其他人非常方便的获取和安装
		部署：拿着"安装包"就可以一个命令运行起来你的应用，自动模拟出一模一样的环境，不管是Windows/Mac/Linux上

		*****Docker开发部署流程：
			Windows上开发，测试 --> 打包(jar) --> 推成镜像 --> 各种服务器使用命令部署

	Docker架构：C/S
	客户端(client):发送命令或者请求到Docker服务端
	服务端(server):接收命令或远程请求，操作镜像或容器

	镜像仓库(Docker Registry)：
		公共仓库：DockerHub/阿里云镜像服务/网易云镜像服务
		私有仓库：公司的私有仓库，不对外开放

常见关键字：
	repository	镜像仓库源
	tag		镜像版本号
	IMAGE ID	镜像ID
	created		创建时间
	SIZE		镜像大小
	container id	容器id
	image		镜像名称
	command		内部运行时的启动命令
	status		状态：Up启动中
	ports		端口映射
	

docker官网：https://docs.docker.com/engine/reference/builder
Docker常用命令：
	普通命令：
		cd  /home/zxhc/docker/app/	进入文件所在目录
		mkdir -p 目录名			创建目录							例：mkdir -p zhousir/haha
		rmdir 目录名			删除目录							例：rmdir zhousir
		ctrl + insert			复制
		shift + insert			粘贴	
		ll				查看当前目录所有文件及权限					例：ll
		ls				查看当前目录所有文件						例：ls
		rm 文件名			删除文件							例：rm allcore-sip.tar
		touch 文件			创建文件							例：touch allcore-sip.log
		pwd				显示当前用户所在目录绝对路径					例：pwd		
	
	帮助启动类命令：
		systemctl start docker		启动命令
		systemctl stop docker		停止命令
		systemctl restart docker	重启命令
		systemctl enable docker		查看docker状态
		docker info			查看docker概要信息
		docker --help			查看docker总体帮助文档
		docker 具体命令 --help		查看docker命令帮助文档

	镜像：		
		镜像名称：[repository]:[tag]		tag未指定默认是最新版本镜像

		镜像操作命令：	CRUD 
			docker search [option] 镜像名	去docker上搜索镜像的详细信息
  	     		docker build			使用dockerfile构建镜像
				-f [dockerfile文件路径名] 
				-t [创建的镜像名]:[tag] 
				.(.表示从当前目录开始构建)
			docker images			查看本地镜像					例：docker images
				-a		列出本地所有的镜像
				-q		只显示镜像ID
			docker rmi 镜像id		本地删除镜像					例：docker rmi ddba9e6f033b
				-nginx:latest
			docker push			将镜像推送到Docker Register镜像服务器
			docker pull 镜像名		从镜像仓库下载到本地镜像
			docker save			将本地镜像保存为一个压缩包				例：	docker save -o allcore-sip.tar 081382b6ac21
				-o nginx.tar nginx:latest						 	docker save -o tar/allcore-sip.tar 081382b6ac21
			docker load			加载压缩包为镜像					例：docker load -i allcore-sip.tar
				-i nginx.tar

			补充：使用docker save打包镜像，将tar包从Linux服务器下载到Windows服务器
				方式一：若使用XShell终端工具，需要下载Xftp远程连接服务器，下载文件到Windows系统本地
				方式二：若使用Xterminal终端工具，直接在Linux操作系统中下载tar包到Windows系统

	容器：
		容器三种状态：
			运行	暂停	停止
	
		容器操作命令：
			docker run -d				创建并运行容器					例：docker run 8961a517de38
				--name		容器名称
				-p		将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口，容器内部有独立的端口
				-d		加上就是后台运行，不加前台运行(可关掉就是前台，后台默认不关)
				-it		给当前容器创建标准输入输出端	
				nginx		镜像名称
			docker stop [容器名称/ID]			停止容器				例：docker stop 8961a517de38
			docker kill [容器名称/ID]			强制停止容器				例：docker kill 8961a517de38
			docker start [容器名称/ID]		启动已停止运行的容器				例：docker start 8961a517de38		
			docker ps				查看所有正在运行的容器				例：docker ps
			docker ps -a				查看所有状态的容器				
			docker ps -q				只显示容器编号
			docker ps -l				显示最近创建的容器
			docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}"		容器输出信息格式化
			docker logs 容器ID			查看容器运行的日志					例：docker logs -f --tail 1000 8961a517de38
				-f		持续跟踪查看日志							例：docker logs -f --tail 1000 8961a517de38 > allcore-sip.log(输出文件到当前目录指定文件)
														例：docker logs -f --tail 1000 8961a517de38 >> allcore-sip.log(输出文件到当前目录指定文件)
														补充：	>	覆盖写入
															>>	追加写入

			docker inspect 容器ID			查看容器内部细节					例：docker inspect 5ca2b17aa675	
				属性：	Mounts		挂载								结果：	Mounts		路径挂载	
						Type			挂载方式								"Type":"bind",	
						Name			数据卷名称							"Source":"/home/test",
						Source			挂载宿主机目录							"Destination":"/home/test"
						Destination		挂载容器内目录

					挂载：操作容器内的一切操作都会作用在数据卷对应的宿主机目录
						
		 	docker exec				进入容器执行命令					
				-it		给当前容器创建标准输入输出端						
				[容器名]		要进入的容器的名称									
				[command]	进入容器后执行的命令									
					/bin/bash	docker exec -it allcore-sip(5ca2b17aa675) /bin/bash				
					/bin/sh		docker exec -it allcore-sip(5ca2b17aa675) /bin/sh				

					命令提示符：root@localhost:/allcore/sip#ls
						结果：	allcore-sip.jar(jar包)		target(log文件)

						补充：	root@localhost:/allcore/sip#
								root		当前登录用户
								localhost	容器主机名
								/allcore/sip	容器工作目录

			docker cp 容器ID:容器内路径 目的主机路径	容器内文件拷贝到宿主机上						
				例：	[zxhc@localhost app]$：docker cp 516aea6363a1:/allcore/sip/target/allcore/log ./log
				结果：	Successfully copied 202MB to /home/zxhc/app/log
				
				解释：	将容器Id516aea6363a1中目录/allcore/sip/target/allcore/log拷贝到宿主机中./log目录下
					在/home/zxhc/app/目录下执行docker cp，将./log与/home/zxhc/app/log做映射		

			exit					退出容器						例：exit			

			docker rm [容器名称/ID]			(先停止)删除容器(不能删除运行中的容器)		例：docker rm -f 8961a517de38
				-f		强制删除运行中的容器
			
			docker create [image]			创建一个新的容器，但不启动它
			docker pause				容器从运行状态到暂停状态		
			docker unpause				容器从暂停状态到运行状态

		容器网络命令：
			docker info 					显示Docker系统信息
			docker version					显示Docker版本信息		
			docker logs [container]				查看容器的日志
			docker network ls				列出Docke网络
			docker network create [network]			创建一个新的Docker网络
			docker network rm				删除指定网络
			docker network prune				清除未使用网络
			docker network inspect				查看网络详细信息
			docker network connect [network] [container]	将容器连接到指定的Docker网络
			docker network disconnect [network] [container]	将容器从指定的Dcoker网络中断开连接

	补充：	docker commit [options] 容器ID [RESPOSOTORY]:[TAG]
			
		练习：
			创建并运行一个redis容器，并且支持数据持久化
				docker run -name mr -p 6379:6379 -d redis redis-server --appenddonly yes
		   	进入redis容器，并执行redis-cli客户端命令，存入num = 666
				docker exec -it mr(进入容器) redis-cli(要执行的命令)
	
		需求：
			在DockerHub中搜索Nginx镜像		hub.docker.com	搜索nginx
			拉取Nginx镜像				docker pull nginx
			将镜像打成压缩包				docker save -o nginx.tar(压缩文件名) nginx:latest(镜像名)			
			查看本地镜像列表				docker images
			删除镜像					docker rmi nginx:latest(镜像名)
			读取压缩包				docker load -i nginx.tar
									-i	读取哪个tar文件
									-q	不输出任何内容
			创建并运行Nginx容器			docker run -d --name nginx -p 80:80 nginx	返回容器Id
			查看容器					docker ps
			停止容器					docker stop nginx
			再次启动容器				docker start nginx
			查看容器日志				docker logs -f --tail 1000 nginx	ctrl + C	停止输出日志
			进入Nginx容器				docker exec -it nginx(容器名) bash	
					补充：容器是独立的类似Linux的文件系统		ls查看文件系统
			删除容器					docker rm nginx
		
		需求：
			创建Nginx容器，修改nginx容器内的html目录下的index.html文件，查看变化
			将静态资源部署到nginx的html目录下

			docker exec -it nginx bash
			cd /user/share/nginx/html		将静态资源部署到nginx的html下使用Xftp远程文件上传实现
			ls					查看容器内的文件列表
		
			
	容器与数据耦合问题：
		1.不便于修改	添加删除修改文件只会发生在容器内部	
		2.数据不可复用	容器内的数据对外不可见
		3.升级维护困难	数据在容器内，删除旧容器，所有数据都跟着删除
	
		数据卷(volume)：		虚拟目录，将宿主机目录与容器目录进行关联
			容器文件------ 挂载-------->数据卷--------映射--------> 硬盘真实文件夹(宿主机目录)

			所以只需要只需要在宿主机操作文件，就可以在容器内操作文件
					
			挂载：操作容器内的一切操作都会作用在数据卷对应的宿主机目录		Mounts:挂载
			挂载方式：
				1.volume方式(数据卷挂载)
				docker run -d --name mn -p 80:80 -v html:/user/share/nginx/html nginx(实际开发)
					-v      html			数据卷名称
						/user/share/nginx/html	容器目录			数据卷:容器目录
				
				2.bind mount方式(宿主机目录挂载)
				docker run -d --name mn -p 80:80 -v /tmp/mysql/data:/var/lib/mysql nginx
					-v	/tmp/mysql/data		宿主机目录			
						/var/lib/mysql		容器内目录/容器内文件(官方网站查文档)		宿主机目录:容器目录
						
					注意：本地目录必须以/开头，若以名称开头会被识别为数据卷目录
				区别：
					数据卷挂载：
						优点：docker会自动创建宿主机硬盘目录
						缺点：创建目录层次较深，不易寻找
					宿主机挂载：
						优点：目录层次低，易寻找
						缺点：需要手动创建目录

			数据卷命令：	
				docker volume --help
				docker volume create		创建数据卷	
				docker volume inspect 		查看某数据卷详情信息
					属性:	Name		html					数据卷名称
						Mountpoint	/var/lib/docker/volumes/html/_data	挂载的宿主机目录
				docker volume ls		查看所有数据卷
				docker volume prune		清除数据卷
				docker volume rm		删除指定数据卷

			数据卷权限：
				-v 容器内路径:ro 	Readonly	只读		镜像层
				-v 容器内路径:rw 	Readwrite	可读可写(默认)	容器层
					
DockerFile自定义镜像	
	原理：镜像分层
	镜像结构：	分层结构，每一层称为一个Layer
		基础镜像层(BaseImage)：包含基本的系统函数库，环境变量，文件系统
		层(Layer)：在BaseImage基础上添加依赖，安装程序，完成整个应用的安装和配置
		入口层(Entrypoint)：镜像中应用启动的命令

		例子：如果冰箱里面已经有苹果了，直接从冰箱中拿苹果，不需要去买苹果
		
	分层结构优点：共享资源，方便复制迁移复用

	Dockerfile：	
		文本文件，包含一个个的指令，用指令说明要执行什么操作构建镜像，每一个指令都会形成一层Layer
			执行完会生成一个新的镜像层，新的镜像层覆盖在原来的镜像之上形成新的镜像

	Dockerfile语法：
		指令：
			FROM <image>			指定基础镜像
			ENV				设置环境变量
			WORKDIR				创建并启动容器，将当前目录切换到WORKDIR指定的目录
			RUN <command>			执行Linux的shell命令，一般是安装过程中的命令
			EXPOSE				指定容器对外暴露的接口
			ADD				将本地文件添加到容器中，tar类型文件会自动解压，可以访问网络资源
			COPY				将本地文件复制到容器中，不会自动解压文件		
			ENTRYPOINT			指定容器启动时所要执行的命令
			CMD <command，args>		容器启动时执行的指令
			
			CMD与ENTRYPOINT区别：
				CMD：设置容器启动后执行的命令和参数
				ENTRYPOINT：指定容器启动时执行的命令
	Dockerfile结构：
		1.基础镜像信息
		2.镜像操作指令
		3.容器启动时执行指令
		
		案例：基于Ubuntu镜像构建一个新镜像，运行一个java项目
			FROM ubuntu:16.04			指定基础镜像			基础镜像层

			ENV JAVA_DIR=/user/local		配置环境变量，JDK的安装目录		中间层
			COPY  ./jdk8.tar.gz $JAVA_DIR						
			COPY ./docker-demo.jar /tmp/app.jar	拷贝jdk和Java项目的包		

			RUN cd $JAVA_DIR \
			 && tar -xf ./jdk8.tar.gz		
			 && mv ./jdk1.8.0_144 ./java8		安装JDK

			ENV JAVA_HOME=$JAVA_DIR/java8
			ENV PATH=$PATH:$JAVA_HOME/bin		配置环境变量
			EXPOSE 8090				暴露接口
			ENTRYPOINT java -jar /tmp/app/.jar	java项目的启动命令			入口层	

		docker build -f [dockerfile文件路径名] -t [创建的镜像名]:[tag] .(.表示从当前目录开始构建)	创建镜像
		docker image ls										查看镜像
		docker run --name test_build_docker demo_1:v0						启动容器

IDEA项目构建镜像：
	要求：需要将allcore-sip服务上传至Linux服务器使应用在线上运行(推包)
		
	1.编写Dockerfile文件(现有的SpringBladeX框架将Dockerfile文件放在每个微服务下)
		FROM zxhc.io/library/eclipse-temurin:8-jre				指定基础镜像

		MAINTAINER allcorejava@qq.com

		RUN mkdir -p /allcore/sip

		# 指定容器时区:东八区
		ENV TZ=Asia/Shanghai
		RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

		WORKDIR /allcore/sip

		EXPOSE 17100

		ADD  ./target/allcore-sip.jar ./sip.jar

		ENTRYPOINT java ${JAVA_OPTS} -Duser.timezone=GMT+08 -Djava.security.egd=file:/dev/./urandom -jar sip.jar

	2.双击shift(全文搜索)搜索Run/Debug COnfigurations
		
	3.点击左上角 "+" 选中Docker -> Dockerfile
		
	4.创建Dockerfile：
		Name：213								指定自定义构建镜像名
		编辑Server -> 指定Engine API URL：tcp://10.10.1.213：2375			目标服务器：10.10.1.213/默认端口：2375

		Build：
			Dockerfile：选择对应服务的Dockerfile自定义镜像文件
			Image tag：根据Linux服务器以往命名方式命名
			
		Run：
			选择右侧Modify指定Run built image
		
	5.点击Apply -> RUN

	6.启动Linux服务器查看镜像是否部署成功：docker images
	
	7.根据docker-compose.yaml文件部署微服务：
		cd app/						进入到包含docker-compose.yaml文件目录
		docker-compose stop allcore-sip			停止原有allcore-sip服务
		docker-compose rm allcore-sip			删除原有allcore-sip服务
		docker-compose up -d allcore-sip		启动allcore-sip服务构建并启动容器
		
					
Java项目构建成镜像:
	DockerCompose:    	多容器操作
		定义：Docker Compose基于Compose文件(docker-compose.yml)快速部署分布式应用，定义和管理多个相关联容器(启动完的服务)的配置和操作
			补充:通常专业术语说编写docker脚本文件就是编写docker-compose.yml文件
			
		Compose文件：	文本文件，通过指令定义集群中的每个容器如何运行
			docker-compose.yml文件结构：
				services		包含多个容器/服务
				networks		网络
				volumes			卷
					
			docker-compose配置常用字段：
				build			构建上下文路径
					dockerfile		指定构建镜像上下文路径
					context			dockerfile路径/执行git仓库的url地址
					args			添加构建镜像的参数
				image			指定启动容器的镜像
					command			执行命令，覆盖容器启动后默认执行的命令	
				container_name		指定一个自定义容器名称，不是生成的默认名称
				environment		添加环境变量
				networks		加入网络	
					network-mode		设置容器的网络模式	
					ports			暴露容器端口
				volumes			卷挂载路径设置
				command			覆盖容器启动后默认执行的命令
				links			链接到另一个服务中的容器
				external links		链接到docker-compose.yml外部的容器	
				expose			暴露端口，只被连接的服务访问
				restart
					-no		默认的重启策略，任何情况都不会重启容器
					-always		容器总是重新启动
					-on-failure	退出代码指示出现故障错误将重新启动容器

			注：docker-compose.yml文件编写参考文档：https://docs.docker.com/compose/	
					
	******	dockerfile和docker-compose区别：
			Dockerfile用于定义单个容器的构建过程和内容
			docker-compose用于定义和管理多个相关联容器的配置和操作
				Dockerfile构建出的镜像可以在docker-compose的配置中使用
		
	DockerCompose常用命令：
		docker-compose up [options] [service]		docker-compose.yml文件配置创建并启动容器	例：docker-compose up -d allcore-sip
		docker-compose ps [options] [service]		展示所有容器				例：docker-compose ps
		docker-compose stop [options] [service]		停止正在运行的容器				例：docker-compose stop allcore-sip
		docker-compose -h/-help				查看帮助文档				例：docker-compose -help/-h
		docker-compose logs [options] [service]		查看容器输出				例：docker-compose logs -f --tail 1000 allcore-sip
		docker-compose build [options] [service]	构建项目中的服务容器			
		docker-compose pull [options] [service]		拉取镜像
		docker-compose restart				重启项目中的服务				
		docker-compose rm				删除所有服务容器				例：docker-compose rm allcore-sip
		docker-compose start				启动已经存在的服务容器			例：docker-compose start allcore-sip
		docker-compose config				验证并查看compose文件配置			例：docker-compose config
		docker-compose create				为服务创建容器
		docker-compose push				推送镜像
、		docker-compose version				打印版本信息				例：docker-compose version
		docker-compose unpause				恢复处于暂停状态的服务			例：docker-compose unpause allcore-sip
		docker-compose port				显示某个容器所映射的公共端口	
		docker-compose kill				强制停止服务容器	
		docker-compose top 				查看运行的进程				例：docker-compose top
			
		Java部署微服务集群：
		1.编写docker-compose.yml文件
			version: "3.2"
			
			services:
			   nacos:
			     image: nacos/nacos-server
			     enviroment:
				MOOD:standlone
			     ports:
				- "8848:8848"
			     container_name:nacos
			   mysql:
			     image：mysql：5.7.25
			     environment：
				MYSQL_ROOT_PASSWORD: 123
			     volumes:	#数据卷挂载
				- "$PWD/mysql/data:/var/lib/mysql"
			   userservice:
			     build: ./user-service
			   orderservice：
			     build： ./order-service
			   gateway:
			     build: ./gateway		基于dockerfile构建镜像，dockerfile在该目录下
			     ports: 
				- "10010:10010"	

		2.修改cloud项目，将项目中的数据库，nacos地址都命名为docker-compose中的服务名
		3.将项目中的每个微服务使用maven打包工具打包
		4.将打包好的jar包拷贝到对应宿主机对应挂载目录中

	docker与docker-compose区别：
		docker用于单个容器或镜像的操作
		docker-compose用于定义和运行多容器Docker应用程序的工具，通过docker-compose.yml描述多个容器及其关系
		
私有仓库搭建：
	CSDN搜索Docker搭建私有仓库(详情省略)
		
			

	
		
	







	
